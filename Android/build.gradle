// @(MSG_ORIGIN)
// @(MSG_EDIT_WARNING)
apply plugin: 'com.android.model.application'

#if @(Gradle.Dependencies.Compile:IsRequired)
dependencies {
    @(Gradle.Dependencies.Compile:Join('\n', 'compile ', ''))
}
#endif

task copySharedLibraries {
    @(JNI.SharedLibrary:Join('\n    ', 'copy {\n        from \'', '\'\n        into file('src/main/jniLibs/armeabi-v7a')\n    }'))
}

build.dependsOn copySharedLibraries

model {
    repositories {
        libs(PrebuiltLibraries) {
            prebuilt {
                binaries.withType(SharedLibraryBinary) {
                    @(JNI.SharedLibrary:Join('\n                    ', 'sharedLibraryFile = file(\'', '\')'))
                }
            }
        }
#if @(Gradle.Repository:IsRequired)
        @(Gradle.Repository:Join('\n        ', '\'', '\''))
#endif
    }

    android {
        compileSdkVersion = 23 //@(SDK.CompileVersion)
        buildToolsVersion = "@(SDK.BuildToolsVersion)"

        defaultConfig.with {
            applicationId = "@(Activity.Package)"
            minSdkVersion.apiLevel = @(SDK.MinVersion)
            targetSdkVersion.apiLevel = @(SDK.TargetVersion)
            versionCode = @(Project.Android.VersionCode)
            versionName = "@(Project.Android.VersionName)"
        }
    }

#if @(Project.Android.Key.Store:IsSet)
    android.signingConfigs {
        create("release") {
            keyAlias = "@(Project.Android.Key.Alias)"
            keyPassword = "@(Project.Android.Key.AliasPassword)"
            storeFile = file("@(Project.Android.Key.Store:Path)")
            storePassword = "@(Project.Android.Key.StorePassword)"
        }
    }
#endif

    android.ndk {
        moduleName = "@(Activity.Name)"
        debuggable = @(DEBUG:Defined:Test('true', 'false'))
        platformVersion = @(NDK.PlatformVersion)
        CFlags.addAll(["-std=c99"])
        CFlags.addAll(["-I@(OutputDirectory:Path)/@(Project.Name)/app/src/main/include"@(IncludeDirectory:EscapeSpace:Replace('\\', '\\\\'):Join('', ', "-I', '"'))])
        CFlags.addAll([@(PreprocessorDefinition:Join(', ', '"-D', '"'))])
        cppFlags.addAll(["-std=c++11", "-fexceptions", "-frtti", "-Wno-invalid-offsetof"])
        cppFlags.addAll(["-I@(OutputDirectory:Path)/@(Project.Name)/app/src/main/include"@(IncludeDirectory:EscapeSpace:Replace('\\', '\\\\'):Join('', ', "-I', '"'))])
        cppFlags.addAll([@(PreprocessorDefinition:Join(', ', '"-D', '"'))])
        ldFlags.addAll([@(LinkDirectory:EscapeSpace:Replace('\\', '\\\\'):Join(', ', '"-L', '"'))])
        ldLibs.addAll([@(JNI.StaticLibraries:SplitAndJoin(', ', '"', '"'))])
        ldLibs.addAll([@(LinkLibrary:Join(', ', '"', '"'))])
        stl = "@(STL)"
    }

    android.sources {
        main {
            jni {
                dependencies {
                    library "prebuilt"
                }
            }
        }
    }

    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.txt'))
        }
    }

    android.productFlavors {
        // for detailed abiFilter descriptions, refer to "Supported ABIs" @
        // https://developer.android.com/ndk/guides/abis.html#sa
        create("arm7") {
            ndk.abiFilters.add("armeabi-v7a")
        }
    }
}
